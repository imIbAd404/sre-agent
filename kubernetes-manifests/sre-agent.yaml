# SRE-Agent Kubernetes Deployment
# GKE Turns 10 Hackathon - Day 2 MVP

---
apiVersion: v1
kind: Namespace
metadata:
  name: sre-system
  labels:
    name: sre-system

---
# Service Account for SRE Agent
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sre-agent
  namespace: sre-system

---
# Cluster Role with necessary permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sre-agent-role
rules:
  # Pod operations
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list", "watch", "delete"]
  
  # Deployment operations
  - apiGroups: ["apps"]
    resources: ["deployments", "deployments/scale"]
    verbs: ["get", "list", "watch", "patch", "update"]
  
  # ReplicaSet operations
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  
  # Events (for monitoring)
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch"]
  
  # Nodes (for cluster-level monitoring)
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]

---
# Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sre-agent-binding
subjects:
  - kind: ServiceAccount
    name: sre-agent
    namespace: sre-system
roleRef:
  kind: ClusterRole
  name: sre-agent-role
  apiGroup: rbac.authorization.k8s.io

---
# ConfigMap for healing playbook
apiVersion: v1
kind: ConfigMap
metadata:
  name: sre-agent-config
  namespace: sre-system
data:
  healing-playbook.yaml: |
    rules:
      - name: "restart-crashloop-pods"
        description: "Automatically restart pods stuck in CrashLoopBackOff"
        condition: "CrashLoopBackOff"
        threshold: 0
        action: "restart_pod"
        namespace: "default"
        enabled: true
        cooldown: 300
        
      - name: "restart-high-restart-pods" 
        description: "Restart pods that have restarted more than 3 times"
        condition: "RestartCount"
        threshold: 3
        action: "restart_pod"
        namespace: "default"
        enabled: true
        cooldown: 600

---
# Secret for Prometheus authentication (if needed)
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-auth
  namespace: sre-system
type: Opaque
data:
  # Base64 encoded username:password (change these!)
  username: YWRtaW4=  # admin
  password: cGFzc3dvcmQ=  # password

---
# SRE-Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sre-agent
  namespace: sre-system
  labels:
    app: sre-agent
spec:
  replicas: 1  # Single instance to avoid conflicts
  selector:
    matchLabels:
      app: sre-agent
  template:
    metadata:
      labels:
        app: sre-agent
    spec:
      serviceAccountName: sre-agent
      containers:
      - name: sre-agent
        image: sre-agent:v3
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: PORT
          value: "8000"
        - name: PROMETHEUS_URL
          value: "http://prometheus-server.monitoring.svc.cluster.local:80"
        - name: PROMETHEUS_USER
          valueFrom:
            secretKeyRef:
              name: prometheus-auth
              key: username
              optional: true
        - name: PROMETHEUS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: prometheus-auth
              key: password
              optional: true
        - name: PLAYBOOK_PATH
          value: "/app/config/healing-playbook.yaml"
        - name: LOG_LEVEL
          value: "INFO"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config-volume
        configMap:
          name: sre-agent-config

---
# Service to expose the SRE Agent
apiVersion: v1
kind: Service
metadata:
  name: sre-agent-service
  namespace: sre-system
  labels:
    app: sre-agent
spec:
  selector:
    app: sre-agent
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  type: ClusterIP

---
# Optional: Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sre-agent-ingress
  namespace: sre-system
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    # Add authentication annotation if needed
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: basic-auth
spec:
  ingressClassName: nginx  # Adjust based on your ingress controller
  rules:
  - host: sre-agent.your-domain.com  # Change to your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sre-agent-service
            port:
              number: 80

---
# HorizontalPodAutoscaler for the SRE Agent (optional)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sre-agent-hpa
  namespace: sre-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sre-agent
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
